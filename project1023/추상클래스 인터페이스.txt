	
	추상클래스 인터페이스

1 추상클래스에 대한 설명 중 틀린 것을 모두 고르면?

(1) 몸체없는 메서드인 추상메서드를 보유한 클래스를 추상클래스라 한다.
o : 몸체는 {}를 뜻함
(2) 추상클래스가 되려면, 메서드가 모두 불완전한 추상메서드이어야 한다.
x : 단 1라도 이다.
(3) 추상클래스는 개발자의 실수에 의해 메서드 내용이 누락될 경우 생성된다.
x :
(4) 추상클래스는 불완전한 클래스이므로 new 연산자에 의해 직접 메모리에 올려질 수 없다.
o : 자식에의해 
(5) 추상클래스가 메모리에 올려지려면 누군가에 의해 내용이 완전해져야 하는데, 자바의 상속을 이용
    하면 부모의 메서드를 자식이 오버라이딩 할 수 있으므로 , 추상메서드가 완성될 수 있다. 
o :

2 다음 중 틀린 것을 고르면?

(1) 추상클래스란 내용이 불완전한 클래스를 의미하며, 추상메서드를 보유한 클래스다.
o :
(2) 추상메서드가 단 하나라도 존재할 경우 이 클래스는 추상클래스가 된다.
o :
(3) 추상메서드란 메서드 정의시 { 브레이스 }는 존재하지만 아무것도 코딩되지 않은 상태의 메서드를
    의미한다.
x : 몸체({}) 가 존재하지 않는다.
(4) 추상메서드는 몸체없는 메서드를 의미하므로, 대부분 개발자의 실수에 의해서 발생된다.
x :
(5) 추상클래스와 추상메서드임을 선언하려면 abstract modifier를 이용한다.
o : 
modifier는 수정자보다는 
수식어 : 형용사, 부사 처럼 '수식자'라는 뜻이 적합하다.

3 다음 설명 중 틀린 것은?

(1) 개발시 특정 시점에 클래스의 내용을 확정지을 수 없거나, 확정지어서는 않되는 경우가 발생하게
   되는데 이때 클래스의 내용을 확정지을 대상에게 완전한 구현을 위임하기 위한 수단이 바로 추상클
   래스이다.
o :
(2) 추상클래스를 상속받는 자식은 불완전한 부모의 추상메서드를 완성할 재정의 의무가 강제된다.
o : 구현강제라고 한다.
(3) 추상클래스는 개발시 구현해야 할 기준 및 가이드라인을 제시할 수 있는 장치로써 유용하게 사용
    된다.
o :
(4) 추상클래스를 상속받는 서브클래스 마저도 추상클래스가 될 수 있다.
o : 추상클래스간 상속이 가능하다.
(5) 추상클래스는 불완전한 클래스이므로 new 연산자에 의해 메모리에 올려질 수 없으며, 자식클래스의
    인스턴스 생성시, 메모리에 올려질 수 있다.
o : 

4 다음 수식자에 대한 설명 중 틀린 것은?

(1) abstract 수식자는 "추상적인"이란 뜻이며 메서드나 클래스에 적용할 수 있다.
o : abstract는 {브레이스}와 관련되기 때문에, 당연히 {}가 있는 메서드와 클래스와 연관되어있다.
   붙일 수 있다. 
 	
(2) final 수식자는 "마지막"이란 뜻이며 클래스에 사용될 경우 더 이상 상속을 허락하지 않겠다는
   의미다.
o :
(3) final 수식자가 메서드에 사용될 경우 오버로딩을 허용하지 않겠다는 의미다.
x : 오버라이딩이다. final 오버로딩에 개념은 없다.
(4) final 수식자가 변수에 사용될 경우 그 값이 더 이상 변하지 않는다의 의미이므로 상수처럼 사용 될 
    수 있다. 
o :
(5) static 수식자는 "정적인" 이란 뜻이며 멤버 여부를 결정짓는데 중요한 역할을 한다.
x : 멤버를 결정짓지 않는다. 전부다 멤버다. static 도 멤버이다. 


5 아래는 상수가 될 수 있는 조건을 설명한 것이다.이 조건을 충족시킬 수 있으려면 아래의 변수 x를
 어떤 수정자로 선언해야 할지 괄호 안을 작성해 보자.

(1) 상수는 프로그램의 시작부터 끝까지 값이 변해서는 않된다.
(2) 상수는 모든 인스턴스간에 공유될 수 있어야 한다.
(3) 상수는 모든 인스턴스가 접근할 수 있어야 한다.

 (   public static final   )  int x = 3;

개발자가 정의할 수 있는 상수 : public static final 
위 순서 상관 없다. 반환형 이전것들은 순서 상관 없다.

6 다음 중 틀린 것은?

(1) 추상클래스를 이용한 설계시 OOP언어의 다중상속 금지라는 규칙이 때로는 현실을 반영하는데 있어
   한계를 드러내는 경우가 있다.
o : 그래서 interface를 쓴다.
(2) 우리의 현실에선 다중상속적 모습도 많이 존재한다.
o :
(3) 인터페이스는 추상메서드만을 모아놓은 메서드 집합이며 클래스는 아니다.
o : 
추상클래스 : 일반메서드, 추상메서드 혼합될 수 있음
인터페이스 : 오직 추상메서드만 온다!!
(4) 인터페이스나 추상클래스나 모두 설계나 기준 마련 목적으로 주로 사용되나, 단 인터페이스는
    클래스가 아니므로 추상클래스로 만으로는 해결할 수 없는 다중상속 문제를 해결할 수 있는 대안이
    될 수 있다.
o :

7 다음 설명 중 틀린 것은?

(1) 인터페이스를 구현하는 클래스는 메서드 재정의 의무가 주어진다.
o :
(2) 인터페이스의 인스턴스를 생성하려면 new 연산자를 사용한다.
x : 직접적으로 생성못하고 자식에 의해서 올라온다.!!
(3) 자바언어에서는 인터페이스를 구현하는 클래스와 인터페이스간 형변환을 허용하고 있으며 같은
    자료형으로 취급된다. 결과적으로 is a 관계가 성립되어 자바의 객체간 형변환 및 다형성도 
    그대로 적용될 수 있다.
o : !!!핵심 
(4) 인터페이스는 클래스이다.
x : 그래서 다중상속할 수 있다. 천사몸을 뺀 날개로 생각하면 된다.
(5) 인터페이스는 클래스가 아닌 추상메서드 집합이기는 하나, 인터페이스를 구현하는 클래스와 인터페
    이스간 같은 자료형으로 취급되고 있기 때문에 결과적으로 다중상속을 구현하는 것과 같다.
o :

8 추상클래스와 사용목적이 비슷한 실생활의 예가 아닌 것은?

1.모니터 국제표준규격VESA (Video Electronics Standards Association)
2.W3C의 DOM (Document Object Model)
3.DBMS의 드라이버
4.JavaEE 스펙
5.스마트폰 엑세서리 : 추상클래스, 부모가 추상적 계획세우고(규격협회), 자식이 만든다(제조자).


