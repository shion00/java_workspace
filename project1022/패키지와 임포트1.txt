	패키지와 임포트

1 다음 설명 중 틀린 것은?

(1) 같은 디렉토리내의 파일명은 OS차원에서도 중복을 허용하지 않으므로 클래스를 하나의 디렉토리에 
     계속 누적하다 보면 클래스 명의 중복을 피하기란 쉽지 않다.
o :
(2) 클래스 명의 중복을 원천적으로 방지하기 위해서는 서로 다른 디렉토리로 구분하여 저장하면 된다.
o :
(3) 관련성 있는 클래스들을 디렉토리 단위로 구분하여 모아놓는 관리방법을 패키지라고 한다.
o :
(4) 클래스 파일명이 동일하더라도 패키지가 다를 경우엔 중복의 문제는 발생하지 않는다.
o : 디렉토리로 구분하면 절대 중복문제가 발생하지 않는다. 사진파일도 그렇고 모두..
(5) 서로 다른 디렉토리에 존재하는 클래스간의 접근은 불가능하다.
x : import 문을 사용하면 다른 패키지의 클래스를 사용할 수 있다.
    단, 해당 패키지에서 public 으로 공개했을때만 가능하다. 이것을 접근제한자라 한다.
(6) 패키지화하여 관리하는 목적은 중복도 피하고, 관련성 있는 클래스들 간의 관리 목적 때문이다.
o :

2 아래 클래스에 대한 설명 중 올바르지 않은 것은?

package pack1;
class  Car{
   int price=300;
}

(1) javac –d 옵션으로 컴파일을 수행하면 pack1 이라는 패키지가 자동으로 생성되면서 그 안에
    Car.class를 생성하여 준다.
o :
(2) 만일 이미 pack1 이라는 패키지가 존재한다면 중복 생성되지 않는다.
o :덮어쓰기가 된다.
(3) 이 클래스는 외부에서 절대로 접근이 불가능한 클래스이다.
o : public 으로 접근제한을 풀지 않았기 때문에 아무도 쓸 수 없다
    앞으로 패키지에 넣는 클래스는 무조건 public 을 해준다!!
    클래스는 공개하되, 안에 구성된 변수와 메서드를 막으면 클래스는 열어놓아도 보안걱정하지 않아도 된다.
(4) price 멤버변수에 접근 제한자가 지정되지 않으면 자동으로 private 으로 지정된 것과 같다.
x : default 접근제한자가 지정된다.  

3 위 2번의 클래스가 실제 하드디스크 D:\minjava\pack1 에 들어있다고 가정할 때 
import 문으로 올바른 것을 모두 고르면?

(1) import D:/ minjava
x : D:/ ← 이 표현 자체가 윈도우용으로 자바의 슬로건에 위배된다. 
    자바를 특정 os에 의존하게 하면 안된다.
(2) import minjava /pack1
x : 자바의 패키지는 일반 디렉토리와는 달리 디렉토리 구분은 점(.)으로 한다.
    또한 클래스명이 빠져있다. 따라서 import minjava.pack1.클래스명; 이 맞다.
(3) import pack1;
x :
(4) import D:/minjava/pack/Car
x :
(5) import pack1.Car
o :
(6) import pack1.*
o : pack1 하위의 모든 것들을 지칭하는 것으로 가능하다!
    주의점은 반드시 클래스명만이 *의 대상이 된다.!
    따라서 import *;는 안된다. 


4 다음 설명 중 올바르지 않은 것은?

(1) 클래스를 하나의 디렉토리에 몰아넣으면 클래스 명이 중복될 경우 중복 파일 문제가 발생할 수 있다.
o :
(2) 관련 있는 디렉토리로 비슷한 업무의 클래스들을 묶어 놓는 것은 관리상 효율성이 있다.
o :
(3) 패키지 명은 소문자로 하되, 주로 개발 밴더사의 도메인을 거꾸로 기재하여 배포한다.
o : 다른 회사와 협력할때, 서로 패키지와 클래스를 주고받는 경우
    내 패키지와 클래스명이 협업사와 동일할 수 있어 이런 경우 덮어쓰기가 되어 문제가 발행한다.
    실무에서는 패키지명을 자신의 회사 도메인을 거꾸로 뒤집어 일단 상위 패키지로 둔다.
    ex) test.com 이라는 도메인을 보유한 회사라면, com.test.study 이런식으로 뒤집어 쓴다.
(4) 같은 패키지 내에 있는 클래스들 끼리는 언제든지 서로의 데이터를 접근할 수 있다.
x : 언제든지x, 접근제한자로 제한을 둘 수 있다.









